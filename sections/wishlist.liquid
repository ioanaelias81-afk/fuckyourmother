{% comment %}
  Wishlist Functionality for Growth Marketing
  This section provides wishlist management functionality
{% endcomment %}

<div class="wishlist-section" data-wishlist-section>
  <div class="wishlist-header">
    <h2 class="wishlist-title">My Wishlist</h2>
    <p class="wishlist-subtitle">Save your favorite items for later</p>
  </div>

  <div class="wishlist-grid" data-wishlist-grid>
    <!-- Wishlist items will be populated by JavaScript -->
  </div>

  <div class="wishlist-empty" data-wishlist-empty style="display: none;">
    <div class="wishlist-empty-content">
      <svg class="wishlist-empty-icon" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
      </svg>
      <h3>Your wishlist is empty</h3>
      <p>Start adding products you love to your wishlist</p>
      <a href="{{ routes.collections_url }}" class="btn btn--primary">Shop Now</a>
    </div>
  </div>
</div>

<!-- Wishlist Button Template (to be added to product cards and product pages) -->
<template id="wishlist-button-template">
  <button class="wishlist-btn" data-wishlist-btn data-product-id="" aria-label="Add to wishlist">
    <svg class="wishlist-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
      <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
    </svg>
    <svg class="wishlist-icon wishlist-icon--filled" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
      <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
    </svg>
  </button>
</template>

<script>
// Wishlist Management System
class WishlistManager {
  constructor() {
    this.wishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    this.init();
  }

  init() {
    this.addWishlistButtons();
    this.renderWishlist();
    this.bindEvents();
  }

  addWishlistButtons() {
    const productCards = document.querySelectorAll('[data-product-id]');
    const template = document.getElementById('wishlist-button-template');
    
    if (!template) return;

    productCards.forEach(card => {
      const productId = card.dataset.productId;
      if (!productId || card.querySelector('.wishlist-btn')) return;

      const button = template.content.cloneNode(true);
      const wishlistBtn = button.querySelector('.wishlist-btn');
      wishlistBtn.dataset.productId = productId;
      
      // Update button state
      this.updateButtonState(wishlistBtn, productId);
      
      // Add to product card
      card.appendChild(button);
    });
  }

  updateButtonState(button, productId) {
    const isInWishlist = this.isInWishlist(productId);
    button.classList.toggle('wishlist-btn--active', isInWishlist);
    button.setAttribute('aria-label', isInWishlist ? 'Remove from wishlist' : 'Add to wishlist');
  }

  isInWishlist(productId) {
    return this.wishlist.some(item => item.id === parseInt(productId));
  }

  addToWishlist(productData) {
    if (!this.isInWishlist(productData.id)) {
      this.wishlist.push(productData);
      this.saveWishlist();
      this.renderWishlist();
      this.showNotification(`${productData.title} added to wishlist`);
    }
  }

  removeFromWishlist(productId) {
    const product = this.wishlist.find(item => item.id === parseInt(productId));
    this.wishlist = this.wishlist.filter(item => item.id !== parseInt(productId));
    this.saveWishlist();
    this.renderWishlist();
    if (product) {
      this.showNotification(`${product.title} removed from wishlist`);
    }
  }

  saveWishlist() {
    localStorage.setItem('wishlist', JSON.stringify(this.wishlist));
  }

  renderWishlist() {
    const grid = document.querySelector('[data-wishlist-grid]');
    const empty = document.querySelector('[data-wishlist-empty]');
    
    if (!grid || !empty) return;

    if (this.wishlist.length === 0) {
      grid.style.display = 'none';
      empty.style.display = 'block';
      return;
    }

    grid.style.display = 'grid';
    empty.style.display = 'none';

    grid.innerHTML = this.wishlist.map(item => `
      <div class="wishlist-item" data-wishlist-item="${item.id}">
        <div class="wishlist-item-image">
          <img src="${item.image}" alt="${item.title}" loading="lazy">
        </div>
        <div class="wishlist-item-content">
          <h3 class="wishlist-item-title">${item.title}</h3>
          <div class="wishlist-item-price">${item.price}</div>
          <div class="wishlist-item-actions">
            <a href="${item.url}" class="btn btn--primary btn--small">View Product</a>
            <button class="btn btn--secondary btn--small" data-remove-wishlist="${item.id}">Remove</button>
          </div>
        </div>
      </div>
    `).join('');

    // Update wishlist counter
    this.updateWishlistCounter();
  }

  updateWishlistCounter() {
    const counters = document.querySelectorAll('[data-wishlist-count]');
    counters.forEach(counter => {
      counter.textContent = this.wishlist.length;
      counter.style.display = this.wishlist.length > 0 ? 'inline' : 'none';
    });
  }

  bindEvents() {
    document.addEventListener('click', (e) => {
      const wishlistBtn = e.target.closest('[data-wishlist-btn]');
      const removeBtn = e.target.closest('[data-remove-wishlist]');

      if (wishlistBtn) {
        e.preventDefault();
        this.handleWishlistClick(wishlistBtn);
      }

      if (removeBtn) {
        e.preventDefault();
        const productId = removeBtn.dataset.removeWishlist;
        this.removeFromWishlist(productId);
      }
    });
  }

  handleWishlistClick(button) {
    const productId = button.dataset.productId;
    
    if (this.isInWishlist(productId)) {
      this.removeFromWishlist(productId);
      this.updateButtonState(button, productId);
    } else {
      // Get product data from page or fetch it
      const productData = this.getProductData(button);
      if (productData) {
        this.addToWishlist(productData);
        this.updateButtonState(button, productId);
      }
    }
  }

  getProductData(button) {
    const productCard = button.closest('[data-product-id]');
    if (!productCard) return null;

    const titleElement = productCard.querySelector('.product-card__title, .product-title, h1, h2, h3');
    const priceElement = productCard.querySelector('.price, .product-price');
    const imageElement = productCard.querySelector('img');
    const linkElement = productCard.querySelector('a[href*="/products/"]');

    return {
      id: parseInt(button.dataset.productId),
      title: titleElement ? titleElement.textContent.trim() : 'Product',
      price: priceElement ? priceElement.textContent.trim() : '',
      image: imageElement ? imageElement.src : '',
      url: linkElement ? linkElement.href : '#'
    };
  }

  showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'wishlist-notification';
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => notification.classList.add('wishlist-notification--show'), 100);
    setTimeout(() => {
      notification.classList.remove('wishlist-notification--show');
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }
}

// Initialize wishlist when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  window.wishlistManager = new WishlistManager();
});
</script>

<style>
.wishlist-section {
  max-width: 1200px;
  margin: 0 auto;
  padding: var(--gap-2xl) var(--gap-md);
}

.wishlist-header {
  text-align: center;
  margin-bottom: var(--gap-2xl);
}

.wishlist-title {
  font-size: var(--font-size-3xl);
  margin: 0 0 var(--gap-sm);
  color: var(--color-foreground);
}

.wishlist-subtitle {
  font-size: var(--font-size-md);
  color: var(--color-foreground);
  opacity: 0.7;
  margin: 0;
}

.wishlist-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: var(--gap-xl);
}

.wishlist-item {
  background: var(--color-background);
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius-lg);
  padding: var(--gap-md);
  transition: box-shadow 0.2s ease;
}

.wishlist-item:hover {
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.wishlist-item-image {
  width: 100%;
  height: 200px;
  border-radius: var(--border-radius-md);
  overflow: hidden;
  margin-bottom: var(--gap-md);
}

.wishlist-item-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.wishlist-item-title {
  font-size: var(--font-size-lg);
  margin: 0 0 var(--gap-sm);
  color: var(--color-foreground);
  font-weight: 600;
  line-height: 1.3;
}

.wishlist-item-price {
  font-size: var(--font-size-md);
  font-weight: 600;
  color: var(--color-primary);
  margin-bottom: var(--gap-md);
}

.wishlist-item-actions {
  display: flex;
  gap: var(--gap-sm);
}

.wishlist-empty {
  text-align: center;
  padding: var(--gap-4xl) var(--gap-md);
}

.wishlist-empty-icon {
  color: var(--color-foreground);
  opacity: 0.3;
  margin-bottom: var(--gap-lg);
}

.wishlist-empty h3 {
  font-size: var(--font-size-xl);
  margin: 0 0 var(--gap-sm);
  color: var(--color-foreground);
}

.wishlist-empty p {
  font-size: var(--font-size-md);
  color: var(--color-foreground);
  opacity: 0.7;
  margin: 0 0 var(--gap-xl);
}

/* Wishlist Button Styles */
.wishlist-btn {
  position: relative;
  background: none;
  border: none;
  padding: var(--gap-sm);
  cursor: pointer;
  border-radius: var(--border-radius-full);
  transition: all 0.2s ease;
  color: var(--color-foreground);
  min-height: var(--touch-target-min);
  min-width: var(--touch-target-min);
  display: flex;
  align-items: center;
  justify-content: center;
}

.wishlist-btn:hover {
  background: var(--color-foreground);
  color: var(--color-background);
  transform: scale(1.1);
}

.wishlist-btn--active {
  color: #e11d48;
}

.wishlist-btn--active:hover {
  background: #e11d48;
  color: white;
}

.wishlist-icon--filled {
  display: none;
}

.wishlist-btn--active .wishlist-icon {
  display: none;
}

.wishlist-btn--active .wishlist-icon--filled {
  display: block;
}

/* Wishlist Notification */
.wishlist-notification {
  position: fixed;
  top: var(--gap-lg);
  right: var(--gap-lg);
  background: var(--color-foreground);
  color: var(--color-background);
  padding: var(--gap-md) var(--gap-lg);
  border-radius: var(--border-radius-lg);
  font-size: var(--font-size-sm);
  font-weight: 500;
  z-index: var(--z-notification);
  transform: translateX(100%);
  opacity: 0;
  transition: all 0.3s ease;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
}

.wishlist-notification--show {
  transform: translateX(0);
  opacity: 1;
}

/* Button Size Variations */
.btn--small {
  padding: var(--gap-sm) var(--gap-md);
  font-size: var(--font-size-sm);
  min-height: auto;
}

.btn--secondary {
  background: transparent;
  color: var(--color-foreground);
  border: 1px solid var(--color-border);
}

.btn--secondary:hover {
  background: var(--color-foreground);
  color: var(--color-background);
}

@media (max-width: 767px) {
  .wishlist-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: var(--gap-md);
  }
  
  .wishlist-item-actions {
    flex-direction: column;
  }
  
  .wishlist-notification {
    right: var(--gap-md);
    left: var(--gap-md);
    transform: translateY(-100%);
  }
  
  .wishlist-notification--show {
    transform: translateY(0);
  }
}
</style>