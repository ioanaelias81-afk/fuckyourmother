{%- comment -%}
  Executive Function Support Components
  Provides progress indicators, step-by-step guidance, and clear completion status
{%- endcomment -%}

<!-- Progress Indicator for Multi-Step Processes -->
{% if progress_steps %}
  <div class="progress-indicator" data-progress-indicator>
    <div class="progress-indicator-header">
      <h3 class="progress-title">{{ progress_title | default: 'Your Progress' }}</h3>
      <div class="progress-summary">
        Step <span data-current-step>{{ current_step | default: 1 }}</span> of {{ progress_steps.size }}
      </div>
    </div>
    
    <div class="progress-bar-container">
      <div class="progress-bar">
        <div class="progress-fill" style="width: {{ current_step | default: 1 | times: 100 | divided_by: progress_steps.size }}%"></div>
      </div>
    </div>
    
    <ol class="progress-steps">
      {% for step in progress_steps %}
        {% assign step_index = forloop.index %}
        {% assign step_status = 'pending' %}
        {% if step_index < current_step %}
          {% assign step_status = 'completed' %}
        {% elsif step_index == current_step %}
          {% assign step_status = 'current' %}
        {% endif %}
        
        <li class="progress-step progress-step--{{ step_status }}" data-step="{{ step_index }}">
          <div class="progress-step-marker">
            {% if step_status == 'completed' %}
              <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                <path d="M13.485 1.515a.5.5 0 0 1 0 .707l-7.5 7.5a.5.5 0 0 1-.707 0l-3.5-3.5a.5.5 0 1 1 .707-.707L6 8.793l7.146-7.146a.5.5 0 0 1 .708 0z"/>
              </svg>
            {% else %}
              <span>{{ step_index }}</span>
            {% endif %}
          </div>
          <div class="progress-step-content">
            <div class="progress-step-title">{{ step.title }}</div>
            {% if step.description %}
              <div class="progress-step-description">{{ step.description }}</div>
            {% endif %}
          </div>
        </li>
      {% endfor %}
    </ol>
  </div>
{% endif %}

<!-- Task Completion Tracker -->
<div class="task-completion" data-task-completion style="display: none;">
  <div class="task-completion-header">
    <h3>Complete Your Setup</h3>
    <div class="task-completion-progress">
      <span data-completed-count>0</span> of <span data-total-count>0</span> completed
    </div>
  </div>
  
  <div class="task-list" data-task-list>
    <!-- Tasks will be dynamically populated -->
  </div>
</div>

<!-- Gentle Guidance Messages -->
<div class="guidance-messages" data-guidance-messages>
  <!-- Context-sensitive help messages -->
</div>

<!-- Save Progress Indicator -->
<div class="save-indicator" data-save-indicator style="display: none;">
  <div class="save-indicator-content">
    <svg class="save-icon" width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
      <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm3.78-9.72a.75.75 0 0 0-1.06-1.06L6.75 9.19 5.28 7.72a.75.75 0 0 0-1.06 1.06l2 2a.75.75 0 0 0 1.06 0l4.5-4.5z"/>
    </svg>
    <span>Your progress is automatically saved</span>
  </div>
</div>

<script>
class ExecutiveFunctionSupport {
  constructor() {
    this.init();
  }

  init() {
    this.setupProgressTracking();
    this.setupTaskCompletion();
    this.setupGuidanceMessages();
    this.setupAutoSave();
  }

  setupProgressTracking() {
    // Track user progress through forms and multi-step processes
    const forms = document.querySelectorAll('form[data-multi-step]');
    
    forms.forEach(form => {
      this.enhanceMultiStepForm(form);
    });
  }

  enhanceMultiStepForm(form) {
    const steps = form.querySelectorAll('[data-step]');
    let currentStep = 1;
    
    steps.forEach((step, index) => {
      if (index === 0) {
        step.style.display = 'block';
      } else {
        step.style.display = 'none';
      }
    });

    // Add navigation buttons
    steps.forEach((step, index) => {
      const stepNumber = index + 1;
      const isLastStep = stepNumber === steps.length;
      const isFirstStep = stepNumber === 1;

      const navigation = document.createElement('div');
      navigation.className = 'step-navigation';
      navigation.innerHTML = `
        ${!isFirstStep ? `<button type="button" class="btn btn--secondary" data-prev-step>Previous</button>` : ''}
        <div class="step-info">Step ${stepNumber} of ${steps.length}</div>
        ${!isLastStep ? `<button type="button" class="btn btn--primary" data-next-step>Next</button>` : ''}
        ${isLastStep ? `<button type="submit" class="btn btn--primary">Complete</button>` : ''}
      `;

      step.appendChild(navigation);

      // Bind navigation events
      const nextBtn = navigation.querySelector('[data-next-step]');
      const prevBtn = navigation.querySelector('[data-prev-step]');

      nextBtn?.addEventListener('click', () => {
        if (this.validateStep(step)) {
          this.goToStep(form, stepNumber + 1);
        }
      });

      prevBtn?.addEventListener('click', () => {
        this.goToStep(form, stepNumber - 1);
      });
    });
  }

  goToStep(form, stepNumber) {
    const steps = form.querySelectorAll('[data-step]');
    const progressIndicator = document.querySelector('[data-progress-indicator]');
    
    steps.forEach((step, index) => {
      step.style.display = index + 1 === stepNumber ? 'block' : 'none';
    });

    // Update progress indicator
    if (progressIndicator) {
      const currentStepSpan = progressIndicator.querySelector('[data-current-step]');
      const progressFill = progressIndicator.querySelector('.progress-fill');
      
      if (currentStepSpan) currentStepSpan.textContent = stepNumber;
      if (progressFill) {
        const percentage = (stepNumber / steps.length) * 100;
        progressFill.style.width = `${percentage}%`;
      }

      // Update step status
      const progressSteps = progressIndicator.querySelectorAll('.progress-step');
      progressSteps.forEach((progressStep, index) => {
        progressStep.className = 'progress-step';
        if (index + 1 < stepNumber) {
          progressStep.classList.add('progress-step--completed');
        } else if (index + 1 === stepNumber) {
          progressStep.classList.add('progress-step--current');
        } else {
          progressStep.classList.add('progress-step--pending');
        }
      });
    }

    // Auto-save progress
    this.saveProgress(stepNumber);
  }

  validateStep(step) {
    const requiredFields = step.querySelectorAll('[required]');
    let isValid = true;

    requiredFields.forEach(field => {
      if (!field.value.trim()) {
        this.showFieldError(field, 'This field is required');
        isValid = false;
      } else {
        this.clearFieldError(field);
      }
    });

    return isValid;
  }

  showFieldError(field, message) {
    this.clearFieldError(field);
    
    const error = document.createElement('div');
    error.className = 'field-error';
    error.textContent = message;
    
    field.parentNode.appendChild(error);
    field.classList.add('field--error');
    field.setAttribute('aria-describedby', 'error-' + field.name);
    error.id = 'error-' + field.name;
  }

  clearFieldError(field) {
    const existingError = field.parentNode.querySelector('.field-error');
    if (existingError) {
      existingError.remove();
    }
    field.classList.remove('field--error');
    field.removeAttribute('aria-describedby');
  }

  setupTaskCompletion() {
    // Create a task completion system for onboarding
    const tasks = [
      { id: 'profile', title: 'Complete your profile', completed: false },
      { id: 'preferences', title: 'Set your preferences', completed: false },
      { id: 'first-download', title: 'Download your first planner', completed: false }
    ];

    this.renderTaskCompletion(tasks);
  }

  renderTaskCompletion(tasks) {
    const container = document.querySelector('[data-task-completion]');
    const taskList = document.querySelector('[data-task-list]');
    
    if (!container || !taskList) return;

    const completedCount = tasks.filter(task => task.completed).length;
    const totalCount = tasks.length;

    // Update counters
    const completedSpan = container.querySelector('[data-completed-count]');
    const totalSpan = container.querySelector('[data-total-count]');
    
    if (completedSpan) completedSpan.textContent = completedCount;
    if (totalSpan) totalSpan.textContent = totalCount;

    // Render tasks
    taskList.innerHTML = tasks.map(task => `
      <div class="task-item ${task.completed ? 'task-item--completed' : ''}" data-task="${task.id}">
        <div class="task-checkbox">
          ${task.completed ? 
            '<svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor"><path d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"/></svg>' :
            '<div class="task-checkbox-empty"></div>'
          }
        </div>
        <div class="task-content">
          <div class="task-title">${task.title}</div>
        </div>
      </div>
    `).join('');

    // Show/hide based on completion
    if (completedCount === totalCount) {
      setTimeout(() => {
        container.style.display = 'none';
      }, 2000);
    } else {
      container.style.display = 'block';
    }
  }

  setupGuidanceMessages() {
    // Provide contextual guidance based on user actions
    this.showGuidanceForContext();
  }

  showGuidanceForContext() {
    const context = this.detectContext();
    const messages = this.getGuidanceMessages(context);
    
    if (messages.length > 0) {
      this.displayGuidanceMessage(messages[0]);
    }
  }

  detectContext() {
    // Detect what the user is trying to do
    if (document.querySelector('.template-product')) return 'product-page';
    if (document.querySelector('.template-cart')) return 'cart';
    if (document.querySelector('.template-checkout')) return 'checkout';
    if (document.querySelector('form')) return 'form';
    return 'general';
  }

  getGuidanceMessages(context) {
    const messageMap = {
      'product-page': [
        'Take your time to explore all the planner features. You can always come back to this page.',
        'All planners include a 30-day money-back guarantee for your peace of mind.'
      ],
      'cart': [
        'Your items are saved automatically. No rush to complete your order.',
        'Free shipping on orders over $75.'
      ],
      'checkout': [
        'Your payment information is secure and encrypted.',
        'You\'ll receive an instant download link after purchase.'
      ]
    };

    return messageMap[context] || [];
  }

  displayGuidanceMessage(message) {
    const container = document.querySelector('[data-guidance-messages]');
    if (!container) return;

    const guidance = document.createElement('div');
    guidance.className = 'guidance-message';
    guidance.innerHTML = `
      <div class="guidance-content">
        <svg class="guidance-icon" width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
          <path d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"/>
        </svg>
        <span>${message}</span>
      </div>
      <button class="guidance-close" aria-label="Close guidance">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
          <path d="M12 4L4 12M4 4l8 8"/>
        </svg>
      </button>
    `;

    container.appendChild(guidance);

    // Auto-dismiss after 8 seconds
    setTimeout(() => {
      guidance.remove();
    }, 8000);

    // Manual dismiss
    guidance.querySelector('.guidance-close').addEventListener('click', () => {
      guidance.remove();
    });
  }

  setupAutoSave() {
    // Show save indicators for user peace of mind
    const forms = document.querySelectorAll('form');
    
    forms.forEach(form => {
      const inputs = form.querySelectorAll('input, textarea, select');
      
      inputs.forEach(input => {
        input.addEventListener('change', () => {
          this.showSaveIndicator();
        });
      });
    });
  }

  showSaveIndicator() {
    const indicator = document.querySelector('[data-save-indicator]');
    if (!indicator) return;

    indicator.style.display = 'block';
    indicator.classList.add('save-indicator--show');

    setTimeout(() => {
      indicator.classList.remove('save-indicator--show');
      setTimeout(() => {
        indicator.style.display = 'none';
      }, 300);
    }, 2000);
  }

  saveProgress(step) {
    // Save user progress to localStorage
    const progressData = {
      currentStep: step,
      timestamp: new Date().toISOString()
    };
    
    localStorage.setItem('user-progress', JSON.stringify(progressData));
    this.showSaveIndicator();
  }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  new ExecutiveFunctionSupport();
});
</script>

<style>
/* Progress Indicator Styles */
.progress-indicator {
  background: var(--color-background);
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius-lg);
  padding: var(--gap-xl);
  margin: var(--gap-lg) 0;
}

.progress-indicator-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--gap-lg);
}

.progress-title {
  margin: 0;
  font-size: var(--font-size-xl);
  font-weight: 600;
  color: var(--color-foreground);
}

.progress-summary {
  font-size: var(--font-size-sm);
  color: var(--color-foreground);
  opacity: 0.8;
}

.progress-bar-container {
  margin-bottom: var(--gap-xl);
}

.progress-bar {
  width: 100%;
  height: 8px;
  background: rgba(var(--color-primary-rgb), 0.2);
  border-radius: var(--border-radius-full);
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  background: var(--color-primary);
  border-radius: var(--border-radius-full);
  transition: width 0.3s ease;
}

.progress-steps {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: var(--gap-md);
}

.progress-step {
  display: flex;
  align-items: flex-start;
  gap: var(--gap-md);
  padding: var(--gap-md);
  border-radius: var(--border-radius-md);
  transition: background-color 0.2s ease;
}

.progress-step--current {
  background: rgba(var(--color-primary-rgb), 0.1);
}

.progress-step--completed {
  opacity: 0.7;
}

.progress-step-marker {
  width: 32px;
  height: 32px;
  border-radius: var(--border-radius-full);
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  font-size: var(--font-size-sm);
  flex-shrink: 0;
  transition: all 0.2s ease;
}

.progress-step--pending .progress-step-marker {
  background: var(--color-background);
  border: 2px solid var(--color-border);
  color: var(--color-foreground);
}

.progress-step--current .progress-step-marker {
  background: var(--color-primary);
  color: var(--color-background);
  border: 2px solid var(--color-primary);
}

.progress-step--completed .progress-step-marker {
  background: var(--color-success, #10b981);
  color: white;
  border: 2px solid var(--color-success, #10b981);
}

.progress-step-title {
  font-weight: 600;
  color: var(--color-foreground);
  margin-bottom: var(--gap-xs);
}

.progress-step-description {
  font-size: var(--font-size-sm);
  color: var(--color-foreground);
  opacity: 0.8;
  line-height: 1.4;
}

/* Step Navigation */
.step-navigation {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: var(--gap-xl);
  padding-top: var(--gap-lg);
  border-top: 1px solid var(--color-border);
}

.step-info {
  font-size: var(--font-size-sm);
  color: var(--color-foreground);
  opacity: 0.8;
  font-weight: 500;
}

/* Task Completion */
.task-completion {
  background: var(--color-background);
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius-lg);
  padding: var(--gap-xl);
  margin: var(--gap-lg) 0;
}

.task-completion-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--gap-lg);
}

.task-completion-header h3 {
  margin: 0;
  font-size: var(--font-size-lg);
  font-weight: 600;
}

.task-completion-progress {
  font-size: var(--font-size-sm);
  color: var(--color-foreground);
  opacity: 0.8;
}

.task-item {
  display: flex;
  align-items: center;
  gap: var(--gap-md);
  padding: var(--gap-md);
  border-radius: var(--border-radius-md);
  transition: all 0.2s ease;
  margin-bottom: var(--gap-sm);
}

.task-item:hover {
  background: rgba(var(--color-primary-rgb), 0.05);
}

.task-item--completed {
  opacity: 0.7;
}

.task-item--completed .task-title {
  text-decoration: line-through;
}

.task-checkbox {
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--color-success, #10b981);
}

.task-checkbox-empty {
  width: 20px;
  height: 20px;
  border: 2px solid var(--color-border);
  border-radius: var(--border-radius-sm);
}

.task-title {
  font-weight: 500;
  color: var(--color-foreground);
}

/* Guidance Messages */
.guidance-message {
  background: var(--color-primary);
  color: var(--color-background);
  padding: var(--gap-md);
  border-radius: var(--border-radius-md);
  margin: var(--gap-md) 0;
  display: flex;
  align-items: center;
  gap: var(--gap-md);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.guidance-content {
  display: flex;
  align-items: center;
  gap: var(--gap-md);
  flex: 1;
}

.guidance-icon {
  flex-shrink: 0;
}

.guidance-close {
  background: none;
  border: none;
  color: var(--color-background);
  cursor: pointer;
  padding: var(--gap-xs);
  border-radius: var(--border-radius-sm);
  transition: background-color 0.2s ease;
  min-height: var(--touch-target-min);
  min-width: var(--touch-target-min);
  display: flex;
  align-items: center;
  justify-content: center;
}

.guidance-close:hover {
  background: rgba(255, 255, 255, 0.2);
}

/* Save Indicator */
.save-indicator {
  position: fixed;
  top: var(--gap-lg);
  left: 50%;
  transform: translateX(-50%) translateY(-100%);
  z-index: var(--z-notification);
  transition: transform 0.3s ease;
}

.save-indicator--show {
  transform: translateX(-50%) translateY(0);
}

.save-indicator-content {
  background: var(--color-success, #10b981);
  color: white;
  padding: var(--gap-md) var(--gap-lg);
  border-radius: var(--border-radius-lg);
  display: flex;
  align-items: center;
  gap: var(--gap-sm);
  font-size: var(--font-size-sm);
  font-weight: 500;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
}

/* Error States */
.field--error {
  border-color: var(--color-error, #ef4444) !important;
  box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.2) !important;
}

.field-error {
  color: var(--color-error, #ef4444);
  font-size: var(--font-size-sm);
  margin-top: var(--gap-xs);
  display: flex;
  align-items: center;
  gap: var(--gap-xs);
}

.field-error::before {
  content: '⚠';
  font-size: var(--font-size-sm);
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
  .progress-indicator-header {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--gap-sm);
  }
  
  .progress-steps {
    gap: var(--gap-sm);
  }
  
  .progress-step {
    padding: var(--gap-sm);
  }
  
  .step-navigation {
    flex-direction: column;
    gap: var(--gap-md);
  }
  
  .task-completion-header {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--gap-sm);
  }
}
</style>